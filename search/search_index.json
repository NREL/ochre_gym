{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the OCHRE Gym Docs","text":"<p>OCHRE (pronounced \"Oh-ker\") Gym is a Gymnasium environment based on the purely Python-based OCHRE residential energy building simulator. OCHRE is a high-fidelity, high-resolution residential building model developed by NREL with behind-the-meter DERs and flexible load models that integrates with controllers and distribution models in building-to-grid co-simulation platforms. It has been benchmarked against EnergyPlus to quantify the tradeoff between fidelity and speed. Read more about OCHRE here.</p> <p>OCHRE Gym features:</p> <ul> <li>No EnergyPlus; each Dwelling consists of multiple RC circuits implemented in pure Python</li> <li>Works with any building that OCHRE supports: get building models from NREL End-Use Load Profiles, ResStock, BEopt, etc.</li> <li>Flexible control of building equipment (HVAC, Water Heater)--support coming for DERs (PV, Battery, EV)</li> <li>Customizable observation space with equipment-level, building-level, and building metadata</li> <li>Simple reward: minimize cost of energy use while maintaining comfort</li> <li>3 different demand response (DR) cost functions: Real-Time Pricing (RTP), Time-of-Use (TOU), and Power Constraints (PC)</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Install in editable mode with <code>pip install -e .</code> from the root of this repo.</p> <ol> <li>Using <code>conda</code> or <code>venv</code>, create an environment with <code>python &gt;= 3.9</code>: <code>conda create -n ochre_gym python=3.9</code>.</li> <li>Clone this repo: <code>git clone git@github.com/NREL/ochre_gym.git</code></li> <li><code>cd ochre_gym</code></li> <li><code>pip install -e .</code></li> </ol> <p>Test your installation with <code>unittest</code> by running <code>python3 -m unittest</code> from the root of this repo.</p> <p>Support for installation via PyPI is coming soon.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Quick start</li> <li>Stable Baselines3 integration</li> </ul>"},{"location":"Actions/","title":"OCHRE Gym Actions","text":"<p>In OCHRE Gym, agents control different types of equipment in the OCHRE Dwelling. Currently, we support controlling HVAC (heating and cooling are separate equipments) and a water heater. OCHRE Gym supports vector action spaces (default) and nested dictionary action spaces.For nested dictionary actions, the top-level keys are the names of the OCHRE Dwelling equipment and the second-level keys are the names of the available controls for each equipment. The values are the corresponding gym.spaces objects.</p> <p>Note</p> <p>The OCHRE simulator internally works with (unordered) nested dictionaries. If a vector action is provided, the OchreEnv will unflatten it, assuming the following order, and convert it into an ordered dictionary. </p>"},{"location":"Actions/#equipment-types","title":"Equipment types","text":"<p>To summarize, the following OCHRE equipment types are currently supported:</p> <ul> <li>HVAC Cooling</li> <li>HVAC Heating</li> <li>Water Heating</li> </ul> <p>We have future plans to add PV and Battery equipment types.</p>"},{"location":"Actions/#equipment-controls","title":"Equipment controls","text":"<p>The following ways to control equipment in OCHRE are provided:</p> <ul> <li>Load Fraction (discrete)</li> <li>Duty Cycle (continuous)</li> <li>Setpoint (continuous)</li> <li>Deadband (continuous)</li> </ul> <p>If you are unfamiliar with some of the control types listed above, we recommend starting with only using Setpoint and ignoring the rest (default).</p>"},{"location":"Actions/#customizing-the-action-space","title":"Customizing the action space","text":"<p>Users are able to customize the equipment and equipment controls in the action space if desired with a dictionary config via the <code>override_equipment_controls</code> keyword argument in  <code>ochre_gym.load()</code>.</p> <p>For example:</p> <pre><code>env = ochre_gym.load(\n\"basic-v0\",\noverride_equipment_controls={\n'HVAC Cooling': ['Setpoint'],\n'HVAC Heating': ['Setpoint']\n}\n)\n</code></pre> <p>Will remove the <code>Water Heating</code> equipment from the Dwelling and only use <code>Setpoint</code> controls for HVAC.</p>"},{"location":"Actions/#as-nested-dict","title":"As Nested Dict","text":"<pre><code>{\n'HVAC Cooling': {\n'Setpoint': np.array([23.]), # or 23.\n},\n'HVAC Heating': {\n...\n},\n'Water Heating': {\n...\n}\n}\n</code></pre>"},{"location":"Actions/#vectorized-array","title":"Vectorized Array","text":"<p>Vector actions are numpy arrays arranged as follows:</p> <pre><code>np.array([\nHVAC Cooling - Load Fraction,\nHVAC Cooling - Duty Cycle,\nHVAC Cooling - Setpoint,\nHVAC Cooling - Deadband,\nHVAC Heating - Load Fraction,\nHVAC Heating - Duty Cycle,\nHVAC Heating - Setpoint,\nHVAC Heating - Deadband,\nWater Heating - Load Fraction,\nWater Heating - Duty Cycle,\nWater Heating - Setpoint,\nWater Heating - Deadband\n])\n</code></pre> <p>If any equipment or equipment control-type is not available or not used, the flattened action space should be dynamically resized while maintaining the same ordering.</p> <p>For example, without <code>HVAC Heating</code>:</p> <pre><code>np.array([\nHVAC Cooling - Load Fraction,\nHVAC Cooling - Duty Cycle,\nHVAC Cooling - Setpoint,\nHVAC Cooling - Deadband,\nWater Heating - Load Fraction,\nWater Heating - Duty Cycle,\nWater Heating - Setpoint,\nWater Heating - Deadband\n])\n</code></pre> <p>or, without using <code>Load Fraction</code>:</p> <pre><code>np.array([\nHVAC Cooling - Duty Cycle,\nHVAC Cooling - Setpoint,\nHVAC Cooling - Deadband,\nHVAC Heating - Duty Cycle,\nHVAC Heating - Setpoint,\nHVAC Heating - Deadband,\nWater Heating - Duty Cycle,\nWater Heating - Setpoint,\nWater Heating - Deadband\n])\n</code></pre>"},{"location":"Buildings/","title":"Buildings in OCHRE Gym","text":"<p>A key advantage of OCHRE Gym over related building RL Gyms is the ease with which new buildings can be added. Buildings in OCHRE Gym are specified with the Home Performance eXtensible Markup Language (HPXML) format. Since OCHRE Gym wraps around OCHRE, you can use any building that is supported by OCHRE. Please read OCHRE's documentation for adding a custom building. </p> <p>To quote from these docs, HPXML and occupancy schedule input files can be generated from:</p> <ul> <li>BEopt 3.0 or later: best for designing a single building model. Includes a user interface to select building features. Note that the occupancy schedule file is optional; users must specify stochastic occupancy in BEopt. To generate input files from BEopt, run your model as usual. The input files you need for OCHRE (in.hpxml and schedules.csv) will be automatically generated and are located in \u2018C:/Users/your_username/Documents/BEopt_3.0.x/TEMP1/1/run\u2019. BEopt generates several xml files as part of the workflow, but the one OCHRE is looking for is always within the run directory.</li> <li>End-Use Load Profiles Database: best for using pre-existing building models</li> <li>ResStock: best for existing ResStock users and for users in need of a large sample of building models.</li> </ul> <p>We provide a number of example buildings in <code>ochre_gym/buildings/</code> created with ResStock.</p>"},{"location":"Buildings/#building-config-details","title":"Building config details","text":"<p>For each building, the following files should be located in the same directory under <code>ochre_gym/buildings/your-env-name</code>:</p> <ul> <li>The HPXML file</li> <li>a schedules.csv file for occupancy usage patterns</li> <li>a weather file (TMY .epw or AMY)</li> <li>A TOML file with the default OCHRE Dwelling args called <code>dwelling.toml</code></li> </ul> <p>See an example in <code>ochre_gym/buildings/basic-v0</code>.  The weather and schedules files should contain a sufficiently long time range spanning the entire episode start/end timestamps.</p>"},{"location":"Buildings/#removing-uncontrollable-loads","title":"Removing uncontrollable loads","text":"<p>Remove uncontrollable \"scheduled\" loads like lighting and appliances from the building by setting <code>disable_uncontrollable_loads=True</code> in <code>ochre_gym.load()</code>.</p>"},{"location":"Demand%20Response/","title":"Demand Response","text":"<p>OCHRE Gym supports three different demand response (DR) reward functions: Real-Time Pricing (RTP), Time-of-Use (TOU), and Power Constraints (PC). Our goal is to train agents that can respond to DR signals and reduce the cost of energy use while maintaining comfort. The three DR programs are inspired by the experiments in this paper.</p> <p>The reward function at each time step is calculated as:</p> \\[ r = -(\\texttt{energy_used} * \\texttt{energy_price} + \\texttt{discomfort_penalty}). \\] <p>Pricing information for each DR type is stored in a .csv file in the <code>ochre_gym/energy_price/{DR_SUBFOLDER}</code> directory, where <code>DR_SUBFOLDER</code> is a custom name (e.g., <code>basic-v0</code>). This allows users to mix and match buildings with different DR programs. Use the keyword argument <code>dr_subfolder</code> (e.g., <code>dr_subfolder=basic-v0</code>) in <code>ochre_gym.load()</code>. The time resolution of these files should match or be higher than control step time resolution. For example, if the control step time resolution is 15 minutes, the pricing info should be 15 minutes or finer.</p>"},{"location":"Demand%20Response/#real-time-pricing-rtp","title":"Real-Time Pricing (RTP)","text":"<p>Electricity price changes every hour based on the RTP from the wholesale market, which is known by the end of the hour. The day-ahead price (DAP) is given at the end of the previous day and provides a prediction of the next day\u2019s RTP. We use the RTP and DAP data from a real-world RTP program.</p> <p>RTP info should be stored in a <code>real_time_price.csv</code> file. The columns should be <code>Datetime,DAP,RTP</code> and the first row should be the column names. The <code>Datetime</code> column should be in the format <code>YYYY-MM-DD HH:MM:SS</code>. The <code>DAP</code> and <code>RTP</code> columns should be in $/kWh.</p> <p>Example:</p> <pre><code>Datetime,DAP,RTP\n2018-06-01 00:00:00,3.6,3.7\n</code></pre>"},{"location":"Demand%20Response/#time-of-use-tou","title":"Time-of-Use (TOU)","text":"<p>Electricity price varies by time of day according to a predetermined schedule. The price is either peak or off-peak, where the peak price is 2-10x higher than the off-peak price. For example, during peak hours (12:00 - 18:00) the price may be $10/kWh, while during off-peak hours (18:00 - 12:00 next day) the price may be $1/kWh. </p> <p>TOU info should be stored in a <code>time_of_use_price.csv</code> file. The columns should be <code>Datetime,TOU</code> and the first row should be the column names. The <code>Datetime</code> column should be in the format <code>MM/DD/YY HH:MM</code>. The <code>TOU</code> column is the energy price in $/kWh.</p> <p>Example:</p> <pre><code>Datetime,TOU\n6/1/18 0:00,1\n</code></pre>"},{"location":"Demand%20Response/#power-constraints-pc","title":"Power Constraints (PC)","text":"<p>Customers receive a lower electricity price for participating in the program. In exchange, during specified times called DR events, their building must reduce its power below a predetermined limit for a period of time\u2014otherwise a penalty is applied. The limit is typically calculated from the building\u2019s baseline consumption and load reduction potential.</p> <p>PC info should be stored in a <code>dr_power_limit.csv</code> file. The columns should be <code>Datetime,power_limit</code> and the first row should be the column names. The <code>Datetime</code> column should be in the format <code>MM/DD/YY HH:MM</code>. The <code>power_limit</code> column is the power limit in kW.</p> <p>Example: </p> <pre><code>Datetime,power_limit\n6/1/18 0:00,20\n</code></pre>"},{"location":"Observations/","title":"OCHRE Gym Observations","text":"<p>The OCHRE Gym observation space is highly customizable to allow users to focus on the most relevant information for their use case. The core set of observations are those provided by the OCHRE building simulator. The OCHRE building simulator records a large number of state variables for the Dwelling---the exact number of variables returned in the OCHRE control result depends on the Dwelling <code>verbosity</code> (default = 7, which we do not recommend changing).</p> <p>The observation space can be configured in the following ways:</p> <ul> <li>Choose a vector or dictionary space</li> <li>Use all or a predefined reduced subset of OCHRE Dwelling state variables</li> <li>Override the observation space to use only a subset of the OCHRE Dwelling state variables by specifying a list of keys </li> <li>Add timestamp and energy price information to the observation space</li> <li>Add static metadata about the Dwelling to the observation space (e.g., # of bedrooms, square footage, etc.)</li> <li>Add custom values derived from the observation space values by defining the <code>customize_observation_space_hook</code> and <code>customize_observations_from_ochre_hook</code> methods in a custom <code>OchreObservationSpaceBaseConfig</code> class</li> </ul> <p>Vectorized observations sort the keys alphabetically.</p>"},{"location":"Observations/#ochre-keys-ochre-dwelling-verbosity-7","title":"OCHRE keys (OCHRE Dwelling verbosity = 7)","text":"Name (units) Air Changes per Hour - Indoor (1/hour) Air Density - Indoor (kg/m^3) Forced Ventilation Flow Rate - Indoor (m^3/s) Forced Ventilation Heat Gain - Indoor (W) Grid Voltage (-) HVAC Cooling Electric Power (kW) HVAC Cooling Reactive Power (kVAR) HVAC Heating Electric Power (kW) HVAC Heating Gas Power (therms/hour) HVAC Heating Reactive Power (kVAR) Humidity Ratio - Indoor (-) Infiltration Flow Rate - Attic (m^3/s) Infiltration Flow Rate - Garage (m^3/s) Infiltration Flow Rate - Indoor (m^3/s) Infiltration Heat Gain - Attic (W) Infiltration Heat Gain - Garage (W) Infiltration Heat Gain - Indoor (W) Internal Heat Gain - Indoor (W) Lighting Electric Power (kW) Lighting Reactive Power (kVAR) Natural Ventilation Flow Rate - Indoor (m^3/s) Natural Ventilation Heat Gain - Indoor (W) Net Latent Heat Gain - Indoor (W) Net Sensible Heat Gain - Attic (W) Net Sensible Heat Gain - Garage (W) Net Sensible Heat Gain - Indoor (W) Occupancy (Persons) Occupancy Heat Gain - Indoor (W) Other Electric Power (kW) Other Gas Power (therms/hour) Other Reactive Power (kVAR) Radiation Heat Gain - Attic (W) Radiation Heat Gain - Garage (W) Radiation Heat Gain - Indoor (W) Relative Humidity - Indoor (-) Temperature - Attic (C) Temperature - Garage (C) Temperature - Ground (C) Temperature - Indoor (C) Temperature - Outdoor (C) Total Electric Energy (kWh) Total Electric Power (kW) Total Gas Energy (therms) Total Gas Power (therms/hour) Total Reactive Energy (kVARh) Total Reactive Power (kVAR) Unmet HVAC Load (C) Water Heating Gas Power (therms/hour) Wet Bulb - Indoor (C) Window Transmitted Solar Gain (W)"},{"location":"Observations/#custom-keys","title":"Custom keys","text":"<p>Added by the default <code>TimeAndEnergyPriceObservationSpaceConfig</code> class:</p> Name Extra info Day of month A scalar (int) for the day of month index. Day of week A scalar (int) for the day of week index. Hour of day A scalar (int) for the hour of day index. Energy Price ($) If the demand response problem is TOU, this is a scalar (float) of the price of energy (USD $). If the demand response problem is RTP, this is a vector with <code>lookahead_steps</code> dims of the day-ahead price (USD $). Power Limit (kW) A scalar (float) of the maximum power consumption for the Dwelling in kW. <p>Added by the <code>MetadataObservationSpaceConfig</code> class:</p> Name Extra info Has Attic A binary value (0 or 1) indicating presence of an attic. Has Garage A binary value (0 or 1) indicating presence of a garage. Number of Bedrooms A scalar (int) counting number of bedrooms in the Dwelling. Square Footage A scalar of the total square footage of the Dwelling."},{"location":"Observations/#using-specific-observations","title":"Using specific observations","text":"<p>To only use a few specific observations, list the desired keys in the <code>override_ochre_observations_with_keys</code> keyword argument in <code>ochre_gym.load()</code>:</p> <pre><code>env = ochre_gym.load(\nenv_name=\"basic-v0\",\nseed=42,\noverride_ochre_observations_with_keys=[\n'Temperature - Indoor (C)',\n'Temperature - Outdoor (C)',\n'Hour of day',\n'HVAC Cooling Electric Power (kW)'\n],\n)\n</code></pre>"},{"location":"Observations/#customizing-the-observation-space","title":"Customizing the observation space","text":"<p>For the most flexibility, create a subclass of <code>OchreObservationSpaceBaseConfig</code> and override the <code>customize_observation_space_hook</code> and <code>customize_observations_from_ochre_hook</code> methods.</p> <p>As an example, here is the <code>MetadataObservationSpaceConfig</code> class, which adds metadata about the Dwelling on top of the additional time and energy price observations:</p> <pre><code>class MetadataObservationSpaceConfig(TimeAndEnergyPriceObservationSpaceConfig):\n\"\"\"\n    A configuration for the observation space that:\n    - Adds time and energy price observations\n    - Adds metadata:\n        - Has Attic (binary)\n        - Has Garage (binary)\n        - Square Footage (float)\n        - Number of Bedrooms (int)\n    \"\"\"\ndef __init__(self, \nobservation_args,\nvectorize_observations,\nuse_all_ochre_observations,\noverride_ochre_observations_with_keys):\n\"\"\"Initialize the OCHRE observation space configuration.\n        Args:\n            observation_args (Dict): A dictionary of keyword arguments.\n            vectorize_observations (bool): Whether to vectorize observations.\n            use_all_ochre_observations (bool): Whether to use all OCHRE observations or not.\n            override_ochre_observations_with_keys (Optional[List[str]]): A list of keys to override the OCHRE observations with. If None, then use all OCHRE observations.\n        \"\"\"                      \nassert 'dwelling_metadata' in observation_args, '\"dwelling_metadata\" must be a key in observation_args'\nsuper().__init__(observation_args,\nvectorize_observations,\nuse_all_ochre_observations,\noverride_ochre_observations_with_keys)\ndef customize_observation_space_hook(self, observations: Dict) -&gt; Dict:\n\"\"\"Customize the observation space by adding metadata observations.\n        Args:\n            observations (Dict): A dictionary of observations to customize.\n        Returns:\n            observations (Dict): The customized dictionary of observations.\n        \"\"\"\nobservations = super().customize_observation_space_hook(observations)\nif 'Garage' in self.observation_args['dwelling_metadata']['zones']:\nobservations['Has Garage'] = spaces.MultiBinary(1)\nif 'Attic' in self.observation_args['dwelling_metadata']['zones']:\nobservations['Has Attic'] = spaces.MultiBinary(1)\nmetadata_observations = {\n'Square Footage': spaces.Box(low=0., high=10000., shape=(1,)),\n'Number of Bedrooms': spaces.Discrete(10),\n}\nobservations = {**observations, **metadata_observations}\nreturn observations\ndef customize_observations_from_ochre_hook(self, observations, control_result, args):\n\"\"\"Customize the observations from OCHRE by adding metadata observations.\n        Args:\n            observations (Dict): A dictionary of observations.\n        Returns:\n            observations (Dict): The customized dictionary of observations.\n        \"\"\"        \nobservations = super().customize_observations_from_ochre_hook(observations, control_result, args)\nhas_attic = 0\nhas_garage = 0\ntotal_sq_ft = args['dwelling_metadata']['zones']['Indoor']['Zone Area (m^2)']\nif 'Garage' in args['dwelling_metadata']['zones']:\nhas_garage = 1\ntotal_sq_ft += args['dwelling_metadata']['zones']['Garage']['Zone Area (m^2)']\nif 'Attic' in args['dwelling_metadata']['zones']:\nhas_attic = 1\ntotal_sq_ft += args['dwelling_metadata']['zones']['Attic']['Zone Area (m^2)']\nobservations['Square Footage'] = total_sq_ft\nobservations['Has Attic'] = has_attic\nobservations['Has Garage'] = has_garage\nobservations['Number of Bedrooms'] = args['dwelling_metadata'][\n'construction']['Number of Bedrooms (-)']\nreturn observations\n</code></pre>"},{"location":"API/ochre_gym-action-space/","title":"ochre_gym.spaces.act_spaces","text":""},{"location":"API/ochre_gym-action-space/#get_action_space_from_ochre","title":"get_action_space_from_ochre","text":""},{"location":"API/ochre_gym-action-space/#ochre_gym.spaces.act_spaces.get_action_space_from_ochre","title":"<code>ochre_gym.spaces.act_spaces.get_action_space_from_ochre(equipment_by_end_use, user_config, vectorize_actions)</code>","text":"<p>Obtain the action space for an OCHRE dwelling simulation.</p> <p>Parameters:</p> Name Type Description Default <code>equipment_by_end_use</code> <code>Dict</code> <p>A dictionary of equipment by end use for the OCHRE Dwelling</p> required <code>user_config</code> <code>Dict</code> <p>A dictionary specifying which control types to use  for each device in a Dwelling</p> required <code>vectorize_actions</code> <code>bool</code> <p>Whether to vectorize the actions</p> required <p>Returns:</p> Name Type Description <code>action_space</code> <code>Union[Dict, Box]</code> <p>The action space for an OCHRE Dwelling.</p> <code>action_keys</code> <code>OrderedDict</code> <p>The keys of the action dict, keys are equipment category  and values are control types.</p>"},{"location":"API/ochre_gym-action-space/#vector_action_to_ochre_control","title":"vector_action_to_ochre_control","text":""},{"location":"API/ochre_gym-action-space/#ochre_gym.spaces.act_spaces.vector_action_to_ochre_control","title":"<code>ochre_gym.spaces.act_spaces.vector_action_to_ochre_control(action, action_keys)</code>","text":"<p>Unflatten a numpy array into a dict of actions.</p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>ndarray</code> <p>The flattened action array.</p> required <code>action_keys</code> <code>OrderedDict</code> <p>The keys of the action dict.</p> required <p>Returns:</p> Name Type Description <code>action_dict</code> <code>OrderedDict</code> <p>The action dict.</p>"},{"location":"API/ochre_gym-action-space/#clipactioncomposite","title":"ClipActionComposite","text":""},{"location":"API/ochre_gym-action-space/#ochre_gym.spaces.act_spaces.ClipActionComposite","title":"<code>ochre_gym.spaces.act_spaces.ClipActionComposite</code>","text":"<p>             Bases: <code>ActionWrapper</code>, <code>RecordConstructorArgs</code></p> <p>Clip the spaces.Box action spaces of a composite action space to their bounds.</p>"},{"location":"API/ochre_gym-action-space/#ochre_gym.spaces.act_spaces.ClipActionComposite.__init__","title":"<code>__init__(env)</code>","text":"<p>A wrapper for clipping continuous actions in a composite action space.</p> <p>Parameters:</p> Name Type Description Default <code>env</code> <code>Env</code> <p>The environment to wrap.</p> required"},{"location":"API/ochre_gym-action-space/#ochre_gym.spaces.act_spaces.ClipActionComposite.action","title":"<code>action(action_)</code>","text":"<p>Recursively clip the flattened, continuous actions in a composite action space.</p> <p>Parameters:</p> Name Type Description Default <code>action_</code> <code>Dict</code> <p>The action to clip.</p> required <p>Returns:</p> Name Type Description <code>action_</code> <code>Dict</code> <p>The clipped composite action.</p>"},{"location":"API/ochre_gym-env-reference/","title":"ochre_gym.ochre_env","text":""},{"location":"API/ochre_gym-env-reference/#ochreenv","title":"OchreEnv","text":""},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.OchreEnv","title":"<code>ochre_gym.ochre_env.OchreEnv</code>","text":"<p>             Bases: <code>Env</code></p> <p>The OCHRE Gym Environment.</p> <p>This is a wrapper for an OCHRE Dwelling simulator, which is a building energy simulation tool. The environment is designed to be used with the Gymnasium interface.</p>"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.OchreEnv.__init__","title":"<code>__init__(env_name, dwelling_args, actions, vectorize_actions, lookahead, reward_args, disable_uncontrollable_loads, vectorize_observations, use_all_ochre_observations, override_ochre_observations_with_keys, observation_space_config=None, logger=None)</code>","text":"<p>Initialize the OCHRE Gym Environment.</p> <p>Parameters:</p> Name Type Description Default <code>env_name</code> <code>str</code> <p>Name of the environment.</p> required <code>dwelling_args</code> <code>Dict</code> <p>Dictionary of OCHRE Dwelling arguments for the OCHRE simulator. See https://ochre-docs-final.readthedocs.io/en/latest/InputsAndArguments.html#dwelling-arguments.</p> required <code>actions</code> <code>Dict</code> <p>Dictionary with keys given by equipment types and values  given by the equipment control types. Sets the actions for the environment.</p> required <code>lookahead</code> <code>str</code> <p>Length of price lookahead provided as part of observation, in \"hour:minute\" format.</p> required <code>reward_args</code> <code>Dict</code> <p>Reward configuration. See ochre_env.Reward for more info.</p> required <code>disable_uncontrollable_loads</code> <code>bool</code> <p>Disable load due to uncontrolled appliances.</p> required <code>vectorize_observations</code> <code>bool</code> <p>Vectorize the observation space. If False, the observation space is a composite spaces.Dict. If True, it is a spaces.Box.</p> required <code>use_all_ochre_observations</code> <code>bool</code> <p>Whether to use all OCHRE observations or a reduced set of defaults. Default: True.</p> required <code>override_ochre_observations_with_keys</code> <code>List[str]</code> <p>Only take these observations from OCHRE.</p> required <code>observation_space_config</code> <code>Optional[OchreObservationSpaceBaseConfig]</code> <p>Observation space configuration. Optionally override the default observation space configuration/args by directly passing a subclass of OchreObservationSpaceBaseConfig.</p> <code>None</code> <code>logger</code> <code>Logger</code> <p>Logger object. Default: None.</p> <code>None</code>"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.OchreEnv.action_vector_to_dict","title":"<code>action_vector_to_dict(action_vector)</code>","text":"<p>Convert the action vector to a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>action_vector</code> <code>array</code> <p>a numpy array of actions, with shape (n,)</p> required <p>Returns:</p> Name Type Description <code>action_dict</code> <code>OrderedDict</code> <p>The action dict.</p>"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.OchreEnv.get_obs","title":"<code>get_obs(control_results)</code>","text":"<p>Obtain observation from the Dwelling control results.</p> <p>Parameters:</p> Name Type Description Default <code>control_results</code> <code>Dict</code> <p>the control results from OCHRE.</p> required <p>Returns:</p> Name Type Description <code>obs</code> <code>array</code> <p>a numpy array for the flattened observation.</p>"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.OchreEnv.observation_vector_to_dict","title":"<code>observation_vector_to_dict(observation_vector)</code>","text":"<p>Convert the observation vector to a dictionary.</p> <p>Parameters:</p> Name Type Description Default <code>observation_vector</code> <code>array</code> <p>a numpy array of observations, with shape (n,)</p> required <p>Returns:</p> Name Type Description <code>observation_dict</code> <code>OrderedDict</code> <p>The observation dict.</p>"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.OchreEnv.reset","title":"<code>reset(seed=None, options=None)</code>","text":"<p>Reset the environment.</p> <p>Rolls back the OCHRE Dwelling to the state after the initialization period using <code>copy.deepcopy</code>. The decorator is used to redirect OCHRE's print statements  to the logger. </p> <p>Parameters:</p> Name Type Description Default <code>seed</code> <code>int</code> <p>seed for the random number generator.</p> <code>None</code> <code>options</code> <code>Dict</code> <p>options for the OCHRE Dwelling.</p> <code>None</code> <p>Returns:</p> Name Type Description <code>obs</code> <code>array</code> <p>a numpy array of observations.</p> <code>control_result</code> <code>Dict</code> <p>a dictionary of OCHRE control results.</p>"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.OchreEnv.step","title":"<code>step(action)</code>","text":"<p>Take a step in the environment. </p> <p>The decorator is used to redirect OCHRE's print statements to the logger. Currently, every time step, an action must be provided  for every equipment. </p> <p>Parameters:</p> Name Type Description Default <code>action</code> <code>Union[Dict, array]</code> <p>a numpy array of actions, with shape (n,) if vectorize_actions is True, otherwise a dictionary of actions.</p> required <p>Returns:</p> Name Type Description <code>obs</code> <code>array</code> <p>a numpy array of observations.</p> <code>rew</code> <code>float</code> <p>the single step reward.</p> <code>terminated</code> <code>bool</code> <p>a flag indicating if the episode is terminated.</p> <code>truncated</code> <code>bool</code> <p>a flag indicating if the episode is truncated.</p> <code>info</code> <code>Dict</code> <p>extra information about the step.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the dictionary action is malformed.</p> <code>ModelException</code> <p>Internally, OCHRE may throw a ModelException if the Dwelling tries to     do something \"un-physical\". Our current way of handling this is to stop     the episode and return a large negative reward.</p> <code>AssertionError</code> <p>Same as above, but for an assertion error.</p>"},{"location":"API/ochre_gym-env-reference/#reward","title":"Reward","text":"<p>The reward function at each time step is calculated as:</p> \\[ r = -(\\texttt{energy_used} * \\texttt{energy_price} + \\texttt{discomfort_penalty}). \\] <p>We current support three demand response programs with different energy prices:</p> <ul> <li><code>TOU</code>: Time-of-use pricing</li> <li><code>RTP</code>: Real-time pricing</li> <li><code>PC</code>: Power constraint</li> </ul> <p>The discomfort penalty is calculated as:</p> <pre><code>deviation = max(max(0.0, indoor_temp - self.thermal_comfort_band_high),\nmax(0.0, self.thermal_comfort_band_low - indoor_temp),\n0.0)\ndiscomfort = self.thermal_discomfort_unit_cost * deviation ** 2\n</code></pre> <p>Reward configuration CSV files</p> <p>The <code>time_of_use_price.csv</code> and <code>dr_power_limit.csv</code> files only have entries for 1 day. Hence, every day in an episode, which may extend over months, will use the same TOU and PC. The <code>real_time_price.csv</code> file has entries for every 5 minutes for 2 months. We will need to consider a general solution for obtaining the price for any time step in an episode, and whether we want these to be fixed or stochastic.</p>"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.Reward","title":"<code>ochre_gym.ochre_env.Reward</code>","text":"<p>Reward function for OCHRE Gym environment.</p>"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.Reward.__call__","title":"<code>__call__(control_results, step_idx)</code>","text":"<p>Calculate single step control reward based on the   control results.</p> <p>Parameters:</p> Name Type Description Default <code>control_results</code> <code>Dict</code> <p>control results from OCHRE.</p> required <code>step_idx</code> <code>int</code> <p>Current step index.</p> required <p>Returns:</p> Name Type Description <code>reward</code> <code>float</code> <p>reward for the current control step scaled by reward_scale.</p>"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.Reward.__init__","title":"<code>__init__(reward_args, simulation_steps, time_resolution)</code>","text":"<p>Initialize the reward function from the given configuration.</p> <p>Parameters:</p> Name Type Description Default <code>reward_args</code> <code>Dict</code> <p>reward configuration. See below.</p> required <code>simulation_steps</code> <code>DatetimeIndex</code> <p>simulation steps in the control episode.</p> required <code>time_resolution</code> <code>timedelta</code> <p>control interval.</p> required"},{"location":"API/ochre_gym-env-reference/#ochre_gym.ochre_env.Reward.__init__--reward_args-dictionary-key-name-value-type","title":"reward_args dictionary - key name (value type)","text":"<pre><code>thermal_comfort_band_high (float): upper bound of the thermal comfort band.\nthermal_comfort_band_low (float): lower bound of the thermal comfort band.\nthermal_discocomfort_unit_cost (float): unit cost of thermal discomfort.\nreward_scale (float): reward scale (Default is 1.)\ndr_type (string): types of DR programs: 'TOU', 'PC' and 'RTP'.\ndr_subfolder (string): The name of the subfolder in `ochre_gym/energy_price` containing the DR files.\nflat_energy_price (float): energy price in $/kWh.\ntou_price_file (string): name of the file in which TOU daily series is\n  stored.\nrtp_price_file (string): name of the file in which RTP historical series\n  is stored.\npc_power_file (string): name of the file in which DR power limit time\n  series is stored.\npc_unit_penalty (float): unit cost of power limit violation.\n</code></pre>"},{"location":"API/ochre_gym-observation-space/","title":"ochre_gym.spaces.obs_spaces","text":""},{"location":"API/ochre_gym-observation-space/#ochreobservationspacebaseconfig","title":"OchreObservationSpaceBaseConfig","text":""},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.OchreObservationSpaceBaseConfig","title":"<code>ochre_gym.spaces.obs_spaces.OchreObservationSpaceBaseConfig</code>","text":"<p>             Bases: <code>ABC</code></p> <p>Base class for OCHRE observation space configuration. Also provides two hooks for customizing the observation space and  customizing the observations from OCHRE.</p> <p>A reduced set of OCHRE observations is defined in parameter OCHRE_GYM_REDUCED_KEYS:</p> <pre><code>'Temperature - Indoor (C)',  # Envelope\n'Temperature - Outdoor (C)',  # Envelope\n'Total Electric Power (kW)',  # Dwelling\n'Total Gas Power (therms/hour)', # Dwelling\n'HVAC Heating Electric Power (kW)', # HVAC Heating\n'HVAC Heating Gas Power (therms/hour)', # HVAC Heating\n'HVAC Cooling Electric Power (kW)', # HVAC Cooling,\n'Water Heating Gas Power (therms/hour)', # Water Heating\n'Water Heating Electric Power (kW)', # Water Heating,\n'EV Electric Power', # EV\n'PV Electric Power', # PV\n'Battery Electric Power', # Battery,\n'Gas Generator Electric Power', # Gas Generator\n'Gas Generator Gas Power', # Gas Generator\n</code></pre>"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.OchreObservationSpaceBaseConfig.__init__","title":"<code>__init__(observation_args, vectorize_observations, use_all_ochre_observations, override_ochre_observations_with_keys)</code>","text":"<p>Initialize the OCHRE observation space configuration.</p> <p>Parameters:</p> Name Type Description Default <code>observation_args</code> <code>Dict</code> <p>A dictionary of keyword arguments.</p> required <code>vectorize_observations</code> <code>bool</code> <p>Whether to vectorize observations.</p> required <code>use_all_ochre_observations</code> <code>bool</code> <p>Whether to use all OCHRE observations or not.</p> required <code>override_ochre_observations_with_keys</code> <code>Optional[List[str]]</code> <p>A list of keys to override the OCHRE observations with. If None, then use all OCHRE observations.</p> required"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.OchreObservationSpaceBaseConfig.customize_observation_space_hook","title":"<code>customize_observation_space_hook(observations)</code>  <code>abstractmethod</code>","text":"<p>A hook to specify a custom observation space for OCHRE Gym. If vectorizing observations, performed beforehand. By default, does nothing. Override this in subclass.</p> <p>Parameters:</p> Name Type Description Default <code>observations</code> <code>Dict</code> <p>A dictionary of observations.</p> required <p>Returns:</p> Name Type Description <code>observations</code> <code>Dict</code> <p>A dictionary of observations.</p>"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.OchreObservationSpaceBaseConfig.customize_observations_from_ochre_hook","title":"<code>customize_observations_from_ochre_hook(observations, ochre_control_result, args)</code>  <code>abstractmethod</code>","text":"<p>A hook enabling a user to augment a given observation based on the OCHRE control result and extra info.</p> <p>Parameters:</p> Name Type Description Default <code>observations</code> <code>Dict</code> <p>A dictionary of observations.</p> required <code>ochre_control_result</code> <code>Dict</code> <p>A dictionary of control results from OCHRE.</p> required <code>args</code> <code>Dict</code> <p>A dictionary of extra info to help create the desired observation.</p> required <p>Returns:</p> Name Type Description <code>observations</code> <code>Dict</code> <p>The customized dictionary of observations.</p>"},{"location":"API/ochre_gym-observation-space/#timeandenergypriceobservationspaceconfig","title":"TimeAndEnergyPriceObservationSpaceConfig","text":""},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.TimeAndEnergyPriceObservationSpaceConfig","title":"<code>ochre_gym.spaces.obs_spaces.TimeAndEnergyPriceObservationSpaceConfig</code>","text":"<p>             Bases: <code>OchreObservationSpaceBaseConfig</code></p> <p>A custom configuration for the observation space that adds time and energy price,  which are not included in the OCHRE observations by default.</p>"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.TimeAndEnergyPriceObservationSpaceConfig.__init__","title":"<code>__init__(observation_args, vectorize_observations, use_all_ochre_observations, override_ochre_observations_with_keys)</code>","text":"<p>Initialize the observation space configuration.</p> <p>Expects that the observation_args dictionary has a 'reward_args' key with a 'dr_type' sub-key. If 'dr_type' is 'RTP', then the observation space will include a vector of energy prices. If 'dr_type' is 'PC', then the observation space will include a vector of power limits.</p> <p>Expects that the observation_args dictionary has a 'lookahead_steps' key with a value of the number of steps to look ahead. If 'lookahead_steps' is None, then the observation space will include a single energy price or power limit value.</p> <p>Parameters:</p> Name Type Description Default <code>observation_args</code> <code>Dict</code> <p>A dictionary of keyword arguments.</p> required <code>vectorize_observations</code> <code>bool</code> <p>Whether to vectorize observations.</p> required <code>use_all_ochre_observations</code> <code>bool</code> <p>Whether to use all OCHRE observations or a default reduced set.</p> required <code>override_ochre_observations_with_keys</code> <code>Optional[List[str]]</code> <p>A list of keys to override the OCHRE observations with. If None, then use all OCHRE observations.</p> required"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.TimeAndEnergyPriceObservationSpaceConfig.customize_observation_space_hook","title":"<code>customize_observation_space_hook(observations)</code>","text":"<p>Customize the observation space by adding time and energy price observations.</p> <p>Parameters:</p> Name Type Description Default <code>observations</code> <code>Dict</code> <p>A dictionary of observations to customize.</p> required <p>Returns:     observations (Dict): The customized dictionary of observations.</p>"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.TimeAndEnergyPriceObservationSpaceConfig.customize_observations_from_ochre_hook","title":"<code>customize_observations_from_ochre_hook(observations, ochre_control_result, args)</code>","text":"<p>Add time and energy price observations from the OCHRE control result.</p> <p>Parameters:</p> Name Type Description Default <code>observations</code> <code>Dict</code> <p>A dictionary of observations.</p> required <code>ochre_control_result</code> <code>Dict</code> <p>A dictionary of control results from OCHRE.</p> required <code>args</code> <code>Dict</code> <p>A dictionary of extra info to help create the desired observation.</p> required <p>Returns:     observations (Dict): The customized dictionary of observations.</p>"},{"location":"API/ochre_gym-observation-space/#metadataobservationspaceconfig","title":"MetadataObservationSpaceConfig","text":""},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.MetadataObservationSpaceConfig","title":"<code>ochre_gym.spaces.obs_spaces.MetadataObservationSpaceConfig</code>","text":"<p>             Bases: <code>TimeAndEnergyPriceObservationSpaceConfig</code></p> <p>A configuration for the observation space that:</p> <ul> <li>Adds time and energy price observations</li> <li>Adds metadata:<ul> <li>Has Attic (binary)</li> <li>Has Garage (binary)</li> <li>Square Footage (float)</li> <li>Number of Bedrooms (int)</li> </ul> </li> </ul>"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.MetadataObservationSpaceConfig.__init__","title":"<code>__init__(observation_args, vectorize_observations, use_all_ochre_observations, override_ochre_observations_with_keys)</code>","text":"<p>Initialize the OCHRE observation space configuration.</p> <p>Parameters:</p> Name Type Description Default <code>observation_args</code> <code>Dict</code> <p>A dictionary of keyword arguments.</p> required <code>vectorize_observations</code> <code>bool</code> <p>Whether to vectorize observations.</p> required <code>use_all_ochre_observations</code> <code>bool</code> <p>Whether to use all OCHRE observations or not.</p> required <code>override_ochre_observations_with_keys</code> <code>Optional[List[str]]</code> <p>A list of keys to override the OCHRE observations with. If None, then use all OCHRE observations.</p> required"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.MetadataObservationSpaceConfig.customize_observation_space_hook","title":"<code>customize_observation_space_hook(observations)</code>","text":"<p>Customize the observation space by adding metadata observations. Args:     observations (Dict): A dictionary of observations to customize.</p> <p>Returns:</p> Name Type Description <code>observations</code> <code>Dict</code> <p>The customized dictionary of observations.</p>"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.MetadataObservationSpaceConfig.customize_observations_from_ochre_hook","title":"<code>customize_observations_from_ochre_hook(observations, control_result, args)</code>","text":"<p>Customize the observations from OCHRE by adding metadata observations.</p> <p>Parameters:</p> Name Type Description Default <code>observations</code> <code>Dict</code> <p>A dictionary of observations.</p> required <p>Returns:</p> Name Type Description <code>observations</code> <code>Dict</code> <p>The customized dictionary of observations.</p>"},{"location":"API/ochre_gym-observation-space/#ochreobservationspace","title":"OchreObservationSpace","text":""},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.OchreObservationSpace","title":"<code>ochre_gym.spaces.obs_spaces.OchreObservationSpace</code>","text":"<p>A class for creating an OCHRE Gym observation space and managing it. Expects an OchreObservationSpaceBaseConfig object to be passed in the constructor that specifies how to configure the observation space. Users should subclass  the OchreObservationSpaceBaseConfig class to create their own custom observation if desired.</p> <p>Keys in the observation space are ordered alphabetically.</p>"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.OchreObservationSpace.__init__","title":"<code>__init__(observation_space_config, dwelling, dwelling_metadata)</code>","text":"<p>Initialize the OchreObservationSpace.</p> <p>Parameters:</p> Name Type Description Default <code>observation_space_config</code> <code>OchreObservationSpaceBaseConfig</code> <p>A configuration object for the observation space.</p> required <code>dwelling</code> <code>Dwelling</code> <p>An OCHRE dwelling object.</p> required <code>dwelling_metadata</code> <code>Dict</code> <p>A dictionary of dwelling metadata.</p> required"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.OchreObservationSpace.get_obs_space_from_ochre","title":"<code>get_obs_space_from_ochre()</code>","text":"<p>Obtain observation space using an OCHRE dwelling simulation.</p> <p>Either returns a composite (Dict) or flattened (vector) observation space. This is decided by the observation_space_config.vectorize_observations parameter.</p> <p>Returns:</p> Name Type Description <code>observation_space</code> <code>Union[Dict, Box]</code> <p>The observation space.</p> <code>observation_keys</code> <code>List[str]</code> <p>The observation keys. Sets the class parameter  self.observation_keys.</p>"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.OchreObservationSpace.ochre_control_result_to_observation","title":"<code>ochre_control_result_to_observation(control_result, observation_args)</code>","text":"<p>Convert an OCHRE control result to an observation.</p> <p>Parameters:</p> Name Type Description Default <code>control_result</code> <code>Dict</code> <p>A dictionary of control results from OCHRE.</p> required <code>observation_args</code> <code>Dict</code> <p>A dictionary of keyword arguments.</p> required <p>Returns:</p> Type Description <code>Union[ndarray, Dict[str, ndarray]]</code> <p>A numpy array or a dictionary of observations.</p>"},{"location":"API/ochre_gym-observation-space/#ochre_gym.spaces.obs_spaces.OchreObservationSpace.unflatten_observation","title":"<code>unflatten_observation(vector_observation)</code>","text":"<p>Given a vector observation, unflatten into a dict.</p> <p>Parameters:</p> Name Type Description Default <code>vector_observation</code> <code>array</code> <p>A vector observation.</p> required <p>Returns:</p> Name Type Description <code>dict_obs</code> <code>OrderedDict</code> <p>A dictionary of observations.</p>"},{"location":"API/ochre_gym-reference/","title":"ochre_gym","text":""},{"location":"API/ochre_gym-reference/#parse_dwelling_args","title":"parse_dwelling_args","text":""},{"location":"API/ochre_gym-reference/#ochre_gym.parse_dwelling_args","title":"<code>ochre_gym.parse_dwelling_args(dwelling_dict, building_path)</code>","text":"<p>Parse the dwelling arguments.</p> <p>Parameters:</p> Name Type Description Default <code>dwelling_dict</code> <code>Dict</code> <p>Dictionary of dwelling arguments.</p> required <code>building_path</code> <code>Dict</code> <p>Path to the building.</p> required <p>Returns:</p> Name Type Description <code>dwelling_dict</code> <code>Dict</code> <p>Dictionary of dwelling arguments.</p>"},{"location":"API/ochre_gym-reference/#load","title":"load","text":""},{"location":"API/ochre_gym-reference/#ochre_gym.load","title":"<code>ochre_gym.load(env_name, **kwargs)</code>","text":"<p>Load an ochre_gym Env by name. Override default arguments with kwargs. Default arguments can be found in the defaults.toml file in ochre_gym/buildings.</p> <p>Parameters:</p> Name Type Description Default <code>env_name</code> <code>str</code> <p>Name of the building environment.</p> required <p>Other Parameters:</p> Name Type Description <code>seed</code> <code>int</code> <p>The random seed used to initialize the environment.</p> <code>start_time</code> <code>str</code> <p>Time to start controlling the building. Format: \"YYYY-MM-DD HH:MM:SS\".</p> <code>time_res</code> <code>str</code> <p>Time resolution for OCHRE. String. Format: \"HH:MM\".</p> <code>end_time</code> <code>str</code> <p>Time to stop controlling the building. Format: \"YYYY-MM-DD HH:MM:SS\".</p> <code>episode_duration</code> <code>str</code> <p>Amount of time to run each episode for.  Number of episode steps is episode_duration / time_res. Ignored if end_time is specified. Format: \"X days\" or \"X hours\", where X &gt; 0.      </p> <code>initialization_time</code> <code>str</code> <p>Amount of time that OCHRE should run before starting to control the building, to initialize the physical building states. Format: \"X days\" or \"X hours\", where X &gt; 0.</p> <code>hpxml_file</code> <code>str</code> <p>Path to the building properties file.</p> <code>schedule_input_file</code> <code>str</code> <p>Path to the building schedule file.</p> <code>weather_file</code> <code>str</code> <p>Path to the building weather file.</p> <code>from_beopt</code> <code>bool</code> <p>Whether using a BEopt building model.</p> <code>verbosity</code> <code>int</code> <p>OCHRE internal verbosity level. Default: 7.</p> <code>log_to_file</code> <code>bool</code> <p>Log to file. Default: False.</p> <code>log_to_console</code> <code>bool</code> <p>Log to console. Default: False.</p> <code>log_output_filepath</code> <code>str</code> <p>Path to a log file. Default: './ochre_gym.log'.</p> <code>disable_uncontrollable_loads</code> <code>bool</code> <p>Disable load due to uncontrolled appliances  such as washer/dryer. Default: False.        </p> <code>vectorize_observations</code> <code>bool</code> <p>Vectorize the observation space. If False, the observation space is a composite spaces.Dict. If True, it is a spaces.Box. Default: True.</p> <code>use_all_ochre_observations</code> <code>bool</code> <p>Whether to use all OCHRE observations or  a reduced set of defaults. Default: True.</p> <code>override_ochre_observations_with_keys</code> <code>List[str]</code> <p>Only take these observations from OCHRE.</p> <code>override_equipment_controls</code> <code>Dict</code> <p>Override the default action space to use the  provided equipment and control types. Dictionary with keys \"OCHRE equipment type\" and list of values \"control type\". For example, {\"HVAC Heating\": [\"Setpoint\"]} or {\"HVAC Cooling\": [\"Duty Cycle\"]}.</p> <code>clip_actions</code> <code>bool</code> <p>Clip the actions to the action space bounds. Default: False.</p> <code>vectorize_actions</code> <code>bool</code> <p>Vectorize the action space. If False, the action space is a composite spaces.Dict. If True, it is a spaces.Box. Default: True.</p> <code>lookahead</code> <code>str</code> <p>Length of price lookahead provided as part of observation, in \"hour:minute\" format. Default: 00:00.</p> <code>thermal_comfort_unit_penalty</code> <code>float</code> <p>Unit penalty for being outside the comfort band.</p> <code>thermal_comfort_band_low</code> <code>float</code> <p>Lower bound of comfort band for thermal comfort.</p> <code>thermal_comfort_band_high</code> <code>float</code> <p>Upper bound of comfort band for thermal comfort.</p> <code>flat_energy_price</code> <code>float</code> <p>Price of energy in $/kWh, used in PC program.</p> <code>reward_scale</code> <code>float</code> <p>Scale the reward by a constant.</p> <code>dr_type</code> <code>str</code> <p>The type of DR program considered, could be \"TOU\", \"PC\" or \"RTP\".</p> <code>dr_subfolder</code> <code>str</code> <p>The name of the subfolder in <code>ochre_gym/energy_price</code> containing the DR files. Default: env_name.</p> <code>tou_price_file</code> <code>str</code> <p>File name of the TOU price daily signal.</p> <code>rtp_price_file</code> <code>str</code> <p>File name of the RTP price signal.</p> <code>pc_power_file</code> <code>str</code> <p>File name of the PC power limit signal.</p> <code>pc_unit_penalty</code> <code>float</code> <p>Unit penalty for violating the power constraint.</p> <p>Returns:</p> Name Type Description <code>env</code> <code>OchreEnv</code> <p>The OCHRE Gym environment.</p>"},{"location":"API/ochre_gym-spaces-reference/","title":"ochre_gym.spaces","text":""},{"location":"API/ochre_gym-spaces-reference/#ochreequipmentsubspace","title":"OchreEquipmentSubSpace","text":""},{"location":"API/ochre_gym-spaces-reference/#ochre_gym.spaces.OchreEquipmentSubSpace","title":"<code>ochre_gym.spaces.OchreEquipmentSubSpace</code>","text":"<p>Class for keeping track of attributes for  Ochre Equipment actions/obs subspaces.</p>"},{"location":"API/ochre_gym-spaces-reference/#ochre_gym.spaces.OchreEquipmentSubSpace.__init__","title":"<code>__init__(name, shape, type, upper_bound=np.array([1.0]), lower_bound=np.array([0.0]), n=2)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the subspace</p> required <code>shape</code> <code>Tuple</code> <p>Shape of the subspace</p> required <code>type</code> <code>SubSpaceType</code> <p>Type of the subspace</p> required <code>upper_bound</code> <code>array</code> <p>Upper bound of the subspace</p> <code>array([1.0])</code> <code>lower_bound</code> <code>array</code> <p>Lower bound of the subspace</p> <code>array([0.0])</code> <code>n</code> <code>int</code> <p>Number of discrete values in the subspace</p> <code>2</code>"},{"location":"API/ochre_gym-spaces-reference/#ochre_gym.spaces.OchreEquipmentSubSpace.register","title":"<code>register()</code>","text":"<p>Returns a dictionary of the attributes of the subspace.</p>"},{"location":"API/ochre_gym-spaces-reference/#subspacetype","title":"SubSpaceType","text":""},{"location":"API/ochre_gym-spaces-reference/#ochre_gym.spaces.SubSpaceType","title":"<code>ochre_gym.spaces.SubSpaceType</code>","text":"<p>Enum for the action type of the subspace.</p>"},{"location":"API/ochre_gym-spaces-reference/#register_equipment_subspace","title":"register_equipment_subspace","text":""},{"location":"API/ochre_gym-spaces-reference/#ochre_gym.spaces.register_equipment_subspace","title":"<code>ochre_gym.spaces.register_equipment_subspace(list_of_dicts)</code>","text":"<p>Converts a list of dictionaries to a dictionary of dictionaries.</p> <p>Parameters:</p> Name Type Description Default <code>list_of_dicts</code> <code>list</code> <p>A list of dictionaries</p> required <p>Returns:</p> Name Type Description <code>subspace</code> <code>Dict</code> <p>A dictionary of dictionaries</p>"},{"location":"Getting%20Started/basics/","title":"Basics","text":"<p>On this page, we describe two ways to get started with training RL agents in OCHRE Gym.</p>"},{"location":"Getting%20Started/basics/#1-quickest-using-ochre_gymload","title":"1. Quickest: Using <code>ochre_gym.load</code>","text":"<p>We provide a helper function to quickly instantiate an OCHRE Gym environment for one of the provided buildings (e.g., <code>basic-v0</code>) via <code>ochre_gym.load</code>:</p> <pre><code>import ochre_gym\n# OchreEnv object\nenv = ochre_gym.load(\nenv_name=\"basic-v0\",\n)\n</code></pre> <p>The <code>ochre_gym.load</code> function will handle creating the OCHRE building simulator instance using the properties, schedule, and weather files located in <code>ochre_gym/buildings/basic-v0</code>.  Keyword arguments passed to <code>load</code> can be used to override the defaults given in the <code>ochre_gym/buildings/basic-v0/dwelling.toml</code> config file. </p> <p>For example, the default observation space is the full OCHRE control result with time stamp and energy price information added, but you can override it to only include a subset of the observations by setting <code>override_ochre_observations_with_keys</code> to a list of the desired keys:</p> <pre><code>import ochre_gym\nenv = ochre_gym.load(\nenv_name=\"basic-v0\",\noverride_ochre_observations_with_keys = [\n'Energy Price ($)',\n'Temperature - Indoor (C)',\n'Total Electric Power (kW)'\n]\n)\n</code></pre>"},{"location":"Getting%20Started/basics/#2-ochreenv","title":"2. OchreEnv","text":"<p>You can also directly instantiate an <code>OchreEnv</code> object. This may be desirable if you want to subclass <code>OchreEnv</code> or customize the environment's observation space by passing a user-defined <code>OchreObservationSpaceBaseConfig</code> to the <code>observation_space_config</code> keyword argument.</p> <p>This requires passing in the OCHRE building simulator's <code>dwelling_args</code>, which is a dictionary with keys: <code>start_time</code>, <code>time_res</code>, <code>duration</code>, <code>initialization_time</code>, <code>hpxml_file</code>, <code>schedule_input_file</code>, and <code>weather_file</code>.</p> <p>For example:</p> <pre><code>env = OchreEnv('basic-v0',\ndwelling_args,\nactions = {\n'HVAC Cooling': ['Setpoint'],\n'HVAC Heating': ['Setpoint']\n},\nvectorize_actions = True,\nlookahead = '00:30',\nreward_args = {\n'dr_type': 'RTP',\n},\ndisable_uncontrollable_loads = False,  \nvectorize_observations= True,\nuse_all_ochre_observations= True,\noverride_ochre_observations_with_keys = None, \nobservation_space_config = None,  # use default TimeAndEnergyPriceObservationSpaceConfig\nlogger = logger)\n</code></pre>"},{"location":"Getting%20Started/basics/#the-basic-ochre-gym-rl-loop","title":"The basic OCHRE Gym RL loop","text":"<pre><code>for step in range(1000):\n# Sample an action from the action space\naction = env.action_space.sample()\n# Step the environment with the sampled action\nobs, rew, terminated, truncated, info = env.step(action)\n# Check if the episode is done       \nif terminated:\nprint(\"Episode finished after {} timesteps\".format(step+1))\nbreak\n</code></pre> <p>The rewards are negative with the max reward being 0 (no energy cost and no discomfort penalty).</p>"},{"location":"Getting%20Started/basics/#logs","title":"Logs","text":"<p>Diagnostic info generated by OCHRE Gym is optionally logged to the console and/or to a file (adjustable via keyword arguments in <code>ochre_gym.load</code>). The default log file is <code>~./ochre_gym.log</code>, but this can be changed by setting the <code>log_output_filepath</code> keyword argument to the full path to the log file when loading the environment.</p>"},{"location":"Getting%20Started/stable_baselines/","title":"Stable Baselines3","text":"<p>You can use an OchreEnv with Stable Baselines3 as a SB3 vector env. Simply make sure to set <code>vectorize_observations=True</code> and <code>vectorize_actions=True</code> when loading the environment.</p> <pre><code>import ochre_gym\nfrom stable_baselines3 import SAC\nfrom stable_baselines3.common.env_util import make_vec_env\nvec_env = ochre_gym.load(\nenv_name=\"basic-v0\",\nvectorize_actions=True,      # for vec_env\nvectorize_observations=True, # for vec_env\noverride_equipment_controls={\n'HVAC Cooling': ['Setpoint'],\n'HVAC Heating': ['Setpoint']\n},\noverride_ochre_observations_with_keys = [\n'Energy Price ($)',\n'Temperature - Indoor (C)',\n'Total Electric Power (kW)'\n],\ndr_type = 'RTP',\nstart_time = '2018-06-03 12:00:00',\ntime_res = '00:30',\nepisode_duration = '30 days',\nseed = 1,\nlog_to_file = False,\nlog_to_console = False,\n)\nmodel = SAC(\"MlpPolicy\", vec_env, verbose=0)\nmodel.learn(total_timesteps=80000)\nmodel.save(\"sac_ochre\")\n</code></pre> <p>This uses the default Soft Actor Critic (SAC) model with a Multi-Layer Perceptron (MLP) policy network and trains it for 80,000 environment steps. The trained agent is saved to <code>sac_ochre.zip</code> in the current directory.</p>"}]}